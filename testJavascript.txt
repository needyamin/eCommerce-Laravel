 <script>
  export default {
    name: 'ProductGrid',
    data() {
      return {
        products: [],
        cart: [],
        cartTotal: 0,
        couponCode: 0,
        totalItemsAdded: 0,
        showTotalInTemplate1: true
      };
    },
    created() {
      console.log('Vue instance created');
      this.getProducts();
      this.getCart();
    },
    methods: {
      getProducts() {
        console.log('Fetching products...');
        axios.get('/api/products')
          .then(response => {
            this.products = response.data.map(product => ({
              ...product,
              quantity: 1
            }));
            console.log('Products fetched:', this.products);
          })
          .catch(error => {
            console.error('There was an error fetching the products!', error);
          });
      },
      getCart() {
        console.log('Fetching cart...');
        axios.get('/api/cart')
          .then(response => {
            if (response.data && typeof response.data === 'object') {
              this.cart = Object.values(response.data);
              this.calculateCartTotal();
              console.log('Cart fetched:', this.cart);
            } else {
              console.error('Response data is not in expected format:', response.data);
            }
          })
          .catch(error => {
            console.error('There was an error fetching the cart!', error);
          });
      },
      addToCart(productId, quantity) {
        console.log(`Adding to cart: productId=${productId}, quantity=${quantity}`);
        axios.post('/api/cart', { product_id: productId, quantity: quantity })
          .then(response => {
            if (response.data && typeof response.data.cart === 'object') {
              this.cart = Object.values(response.data.cart);
              console.log('Item added to cart:', this.cart);
              this.calculateCartTotal();
              this.totalItemsAdded++;
              alertify.success('Item added to cart');
            } else {
              console.error('Response data is not in expected format:', response.data.cart);
              alertify.error('Failed to add item to cart');
            }
          })
          .catch(error => {
            console.error('There was an error adding the product to the cart!', error);
            alertify.error('Failed to add item to cart');
          });
      },
      removeFromCart(productId) {
        console.log(`Removing from cart: productId=${productId}`);
        axios.delete(`/api/cart/${productId}`)
          .then(response => {
            if (response.data && typeof response.data.cart === 'object') {
              this.cart = Object.values(response.data.cart);
              console.log('Item removed from cart:', this.cart);
              this.calculateCartTotal();
              alertify.success('Item removed from cart');
            } else {
              console.error('Response data is not in expected format:', response.data.cart);
              alertify.error('Failed to remove item from cart');
            }
          })
          .catch(error => {
            console.error('There was an error removing the product from the cart!', error);
            alertify.error('Failed to remove item from cart');
          });
      },
      updateQuantity(productId, quantity) {
        console.log(`Updating quantity: productId=${productId}, quantity=${quantity}`);
        
        if (quantity < 1) {
          if (confirm('Are you sure you want to remove this item from your cart?')) {
            axios.delete(`/api/cart/${productId}`)
              .then(response => {
                if (response.data && typeof response.data.cart === 'object') {
                  this.cart = Object.values(response.data.cart);
                  console.log('Item removed from cart:', this.cart);
                  this.calculateCartTotal();
                  alertify.success('Item removed from cart');
                } else {
                  console.error('Response data is not in expected format:', response.data.cart);
                  alertify.error('Failed to remove item from cart');
                }
              })
              .catch(error => {
                console.error('There was an error removing the item from cart!', error);
                alertify.error('Failed to remove item from cart');
              });
          } else {
            let item = this.cart.find(item => item.id === productId);
            if (item) item.quantity = 1;
          }
        } else {
          let item = this.cart.find(item => item.id === productId);
          if (item) item.quantity = quantity;
  
          axios.patch(`/api/cart/${productId}`, { quantity: quantity })
            .then(response => {
              if (response.data && response.data.status === 'success') {
                console.log('Quantity updated:', response.data.cart);
                this.calculateCartTotal();
                alertify.success('Quantity updated');
              } else {
                console.error('Response data is not in expected format:', response.data);
                alertify.error('Failed to update quantity');
              }
            })
            .catch(error => {
              console.error('There was an error updating the product quantity!', error);
              alertify.error('Failed to update quantity');
            });
        }
      },
      checkout() {
        console.log('Checking out...');
        
        let checkoutData = {
          cartItems: this.cart,
          cartTotal: this.cartTotal
        };
  
        axios.post('/api/checkout', checkoutData)
          .then(response => {
            this.cart = [];
            this.cartTotal = 0;
  
            console.log('Checkout successful:', response.data);
            alertify.success('Checkout successful!');
          })
          .catch(error => {
            console.error('There was an error during checkout!', error);
            alertify.error('Checkout failed');
          });
      },
      applyCoupon() {
        console.log('Applying coupon:', this.couponCode);
        
        axios.post('/api/apply-coupon', { coupon_code: this.couponCode })
          .then(response => {
            if (response.data && typeof response.data.cart === 'object') {
              this.cart = Object.values(response.data.cart);
              console.log('Cart with coupon applied:', this.cart);
              this.calculateCartTotal();
              alertify.success('Coupon applied successfully');
            } else {
              console.error('Response data is not in expected format:', response.data.cart);
              alertify.error('Failed to apply coupon');
            }
          })
          .catch(error => {
            console.error('There was an error applying the coupon:', error);
            alertify.error('Failed to apply coupon');
          });
      },
      calculateCartTotal() {
        this.cartTotal = this.cart.reduce((total, item) => {
          return total + (item.price * item.quantity);
        }, 0);
        
        this.cartTotal = parseFloat(this.cartTotal.toFixed(2));
      }
    },
    computed: {
      totalItemsInCart() {
        return this.cart.reduce((total, item) => {
          return total + item.quantity;
        }, 0);
      }
    }
  };
  </script>
  


























<!--- Chheck blade code -->
<script>
new Vue({
    el: '#app',
    data: {
        products: [],
        cart: [],
        cartTotal: 0,
        couponCode: 0,
        totalItemsAdded: 0, // Initialize totalItemsAdded counter
    },
    created() {
        console.log('Vue instance created');
        this.getProducts();
        this.getCart();
    },
    methods: {
        getProducts() {
            console.log('Fetching products...');
            axios.get('/api/products')
                .then(response => {
                    this.products = response.data.map(product => ({
                        ...product,
                        quantity: 1 // Initialize quantity for each product
                    }));
                    console.log('Products fetched:', this.products);
                })
                .catch(error => {
                    console.error('There was an error fetching the products!', error);
                });
        },
        getCart() {
            console.log('Fetching cart...');
            axios.get('/api/cart')
                .then(response => {
                    if (response.data && typeof response.data === 'object') {
                        // Convert response object to an array
                        this.cart = Object.values(response.data);
                        this.calculateCartTotal();
                        console.log('Cart fetched:', this.cart);
                    } else {
                        console.error('Response data is not in expected format:', response.data);
                    }
                })
                .catch(error => {
                    console.error('There was an error fetching the cart!', error);
                });
        },
        addToCart(productId, quantity) {
            console.log(`Adding to cart: productId=${productId}, quantity=${quantity}`);
            axios.post('/api/cart', { product_id: productId, quantity: quantity })
                .then(response => {
                    if (response.data && typeof response.data.cart === 'object') {
                        // Convert response object to an array
                        this.cart = Object.values(response.data.cart);
                        console.log('Item added to cart:', this.cart);
                        this.calculateCartTotal();
                        this.totalItemsAdded++; // Increment totalItemsAdded counter
                        alertify.success('Item added to cart');
                    } else {
                        console.error('Response data is not in expected format:', response.data.cart);
                        alertify.error('Failed to add item to cart');
                    }
                })
                .catch(error => {
                    console.error('There was an error adding the product to the cart!', error);
                    alertify.error('Failed to add item to cart');
                });
        },
        removeFromCart(productId) {
            console.log(`Removing from cart: productId=${productId}`);
            axios.delete(`/api/cart/${productId}`)
                .then(response => {
                    if (response.data && typeof response.data.cart === 'object') {
                        // Convert response object to an array
                        this.cart = Object.values(response.data.cart);
                        console.log('Item removed from cart:', this.cart);
                        this.calculateCartTotal();
                        alertify.success('Item removed from cart');
                    } else {
                        console.error('Response data is not in expected format:', response.data.cart);
                        alertify.error('Failed to remove item from cart');
                    }
                })
                .catch(error => {
                    console.error('There was an error removing the product from the cart!', error);
                    alertify.error('Failed to remove item from cart');
                });
        },
        updateQuantity(productId, quantity) {
            console.log(`Updating quantity: productId=${productId}, quantity=${quantity}`);
            
            // Check if quantity is less than 1
            if (quantity < 1) {
                // Prompt user for confirmation to remove item from cart
                if (confirm('Are you sure you want to remove this item from your cart?')) {
                    // Perform axios delete request to remove item from cart
                    axios.delete(`/api/cart/${productId}`)
                        .then(response => {
                            if (response.data && typeof response.data.cart === 'object') {
                                this.cart = Object.values(response.data.cart);
                                console.log('Item removed from cart:', this.cart);
                                this.calculateCartTotal();
                                alertify.success('Item removed from cart');
                            } else {
                                console.error('Response data is not in expected format:', response.data.cart);
                                alertify.error('Failed to remove item from cart');
                            }
                        })
                        .catch(error => {
                            console.error('There was an error removing the item from cart!', error);
                            alertify.error('Failed to remove item from cart');
                        });
                } else {
                    // Reset quantity to 1 if user cancels
                    let item = this.cart.find(item => item.id === productId);
                    if (item) item.quantity = 1;
                }
            } else {
                // Find the item in the cart and update the quantity locally
                let item = this.cart.find(item => item.id === productId);
                if (item) item.quantity = quantity;

                // Perform axios patch request to update quantity on server
                axios.patch(`/api/cart/${productId}`, { quantity: quantity })
                    .then(response => {
                        if (response.data && response.data.status === 'success') {
                            console.log('Quantity updated:', response.data.cart);
                            this.calculateCartTotal();
                            alertify.success('Quantity updated');
                        } else {
                            console.error('Response data is not in expected format:', response.data);
                            alertify.error('Failed to update quantity');
                        }
                    })
                    .catch(error => {
                        console.error('There was an error updating the product quantity!', error);
                        alertify.error('Failed to update quantity');
                    });
            }
        },
        checkout() {
            console.log('Checking out...');
            
            // Prepare data to send in the checkout request
            let checkoutData = {
                cartItems: this.cart,
                cartTotal: this.cartTotal
            };

            axios.post('/api/checkout', checkoutData)
                .then(response => {
                    // Clear cart and reset cart total after successful checkout
                    this.cart = [];
                    this.cartTotal = 0;

                    console.log('Checkout successful:', response.data);
                    alertify.success('Checkout successful!');
                })
                .catch(error => {
                    console.error('There was an error during checkout!', error);
                    alertify.error('Checkout failed');
                });
        },
        applyCoupon() {
            console.log('Applying coupon:', this.couponCode);
            
            axios.post('/api/apply-coupon', { coupon_code: this.couponCode })
                .then(response => {
                    if (response.data && typeof response.data.cart === 'object') {
                        this.cart = Object.values(response.data.cart);
                        console.log('Cart with coupon applied:', this.cart);
                        this.calculateCartTotal();
                        alertify.success('Coupon applied successfully');
                    } else {
                        console.error('Response data is not in expected format:', response.data.cart);
                        alertify.error('Failed to apply coupon');
                    }
                })
                .catch(error => {
                    console.error('There was an error applying the coupon:', error);
                    alertify.error('Failed to apply coupon');
                });
        },
        calculateCartTotal() {
            this.cartTotal = this.cart.reduce((total, item) => {
                return total + (item.price * item.quantity);
            }, 0);
            
            this.cartTotal = parseFloat(this.cartTotal.toFixed(2));
        }
    },
    computed: {
        totalItemsInCart() {
            return this.cart.reduce((total, item) => {
                return total + item.quantity;
            }, 0);
        }
    }
});
</script>







