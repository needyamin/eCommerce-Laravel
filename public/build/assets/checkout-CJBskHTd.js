import{$ as e,a}from"./jquery-CyGccwRX.js";e(document).ready(function(){const u=e('meta[name="csrf-token"]').attr("content");function d(){console.log("Fetching cart..."),e.ajax({url:"/api/cart",method:"GET",success:function(t){if(t&&typeof t=="object"){const c=Object.values(t);s(c),i(c),console.log("Cart fetched:",c)}else console.error("Response data is not in expected format:",t)},error:function(t){console.error("There was an error fetching the cart!",t)}})}function f(){console.log("Fetching watchlist..."),e.ajax({url:"/api/watchlist",method:"GET",success:function(t){if(t&&typeof t=="object"){const c=Object.values(t);console.log("Watchlist:",c);const o=c.length;document.getElementById("total-watchlist-items").innerText=o}else console.error("Response data is not in expected format:",t)},error:function(t){console.error("There was an error fetching the watchlist!",t)}})}function l(){console.log("Updating cart count..."),e.ajax({url:"/api/cart",method:"GET",success:function(t){if(t&&typeof t=="object"){const o=Object.values(t).reduce((r,n)=>r+parseInt(n.quantity,10),0);l(),e("#total-cart-items").text(o)}else console.error("Response data is not in expected format:",t)},error:function(t){console.error("There was an error fetching the cart count!",t)}})}function s(t){const c=e("#cart-items");c.empty(),t.forEach(o=>{const r=`
                <tr data-id="${o.id}">
                    <td>${o.product_name}</td>
                    <td>$${parseFloat(o.price).toFixed(2)}</td>
                    <td style="width:150px;">
                        <input type="number" class="item-quantity" value="${o.quantity}" min="1">
                    </td>
                    <td style="width:150px;">$${(o.price*o.quantity).toFixed(2)}</td>
                    <td>
                        <button class="btn-sm btn btn-danger remove-from-cart">Remove</button>
                    </td>
                </tr>
            `;c.append(r)})}function i(t){const c=t.reduce((o,r)=>o+r.price*r.quantity,0);e("#cart-total").text(c.toFixed(2))}function m(){const t=e("#coupon-code").val();console.log("Applying coupon:",t),e.ajax({url:"/api/apply-coupon",method:"POST",data:{coupon_code:t},headers:{"X-CSRF-TOKEN":u},success:function(c){if(c&&typeof c.cart=="object"){const o=Object.values(c.cart);s(o),i(o),a.success("Coupon applied successfully")}else console.error("Response data is not in expected format:",c.cart),a.error("Failed to apply coupon")},error:function(c){console.error("There was an error applying the coupon:",c),a.error("Failed to apply coupon")}})}function h(){console.log("Checking out...");const t=[];e("#cart-items tr").each(function(){const o=e(this).data("id"),r=parseInt(e(this).find(".item-quantity").val())||0,n=parseFloat(e(this).find(".item-price").val())||0,p=e(this).find(".item-product_name").val()||"",y=parseInt(e(this).find(".item-stock_quantity").val())||0;t.push({id:o,quantity:r,product_name:p,price:n,stock_quantity:y})});const c=e('meta[name="csrf-token"]').attr("content");e.ajax({url:"/api/checkout",method:"POST",data:{cartItems:t,cartTotal:parseFloat(e("#cart-total").text())||0},headers:{"X-CSRF-TOKEN":c},success:function(o){console.log(o),e("#cart-items").empty(),e("#cart-total").text("0.00"),a.success("Checkout successful!")},error:function(o){console.error("There was an error during checkout!",o),a.error("Checkout failed")}})}e("#apply-coupon").click(m),e("#checkout").click(h),e("#cart-items").on("change",".item-quantity",function(){const c=e(this).closest("tr").data("id"),o=e(this).val();o<1?confirm("Are you sure you want to remove this item from your cart?")?e.ajax({url:`/api/cart/${c}`,method:"DELETE",headers:{"X-CSRF-TOKEN":u},success:function(r){if(r&&typeof r.cart=="object"){const n=Object.values(r.cart);s(n),i(n),a.success("Item removed from cart")}else console.error("Response data is not in expected format:",r.cart),a.error("Failed to remove item from cart")},error:function(r){console.error("There was an error removing the item from the cart!",r),a.error("Failed to remove item from cart")}}):e(this).val(1):e.ajax({url:`/api/cart/${c}`,method:"PATCH",data:{quantity:o},headers:{"X-CSRF-TOKEN":u},success:function(r){if(r&&r.status==="success"){const n=Object.values(r.cart);s(n),i(n),a.success("Quantity updated")}else console.error("Response data is not in expected format:",r),a.error("Failed to update quantity")},error:function(r){console.error("There was an error updating the product quantity!",r),a.error("Failed to update quantity")}})}),e("#cart-items").on("click",".remove-from-cart",function(){const c=e(this).closest("tr").data("id");e.ajax({url:`/api/cart/${c}`,method:"DELETE",headers:{"X-CSRF-TOKEN":u},success:function(o){if(o&&typeof o.cart=="object"){const r=Object.values(o.cart);s(r),i(r),a.success("Item removed from cart")}else console.error("Response data is not in expected format:",o.cart),a.error("Failed to remove item from cart")},error:function(o){console.error("There was an error removing the product from the cart!",o),a.error("Failed to remove item from cart")}})}),d(),f(),l()});
